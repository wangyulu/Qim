package serv

import (
	"bytes"
	"strings"
	"time"

	"google.golang.org/protobuf/proto"
	"jinv/kim"
	"jinv/kim/container"
	"jinv/kim/logger"
	"jinv/kim/wire"
	"jinv/kim/wire/pkt"
)

var log = logger.WithFields(logger.Fields{"server": wire.SNChat, "pkg": "serv"})

type ServHandler struct {
	r          *kim.Router
	cache      kim.SessionStorage
	dispatcher *ServerDispatcher
}

func NewServHandler(r *kim.Router, cache kim.SessionStorage) *ServHandler {
	return &ServHandler{
		r:          r,
		dispatcher: &ServerDispatcher{},
		cache:      cache,
	}
}

func (h *ServHandler) Accept(conn kim.Conn, timeout time.Duration) (string, error) {
	log.Infoln("enter")

	if err := conn.SetReadDeadline(time.Now().Add(timeout)); err != nil {
		return "", err
	}

	frame, err := conn.ReadFrame()
	if err != nil {
		return "", err
	}

	var req pkt.InnerHandshakeReq

	_ = proto.Unmarshal(frame.GetPayload(), &req)

	return req.ServiceId, nil
}

func (h *ServHandler) Receive(agent kim.Agent, payload []byte) {
	buf := bytes.NewBuffer(payload)

	packet, err := pkt.MustReadLogicPkt(buf)
	if err != nil {
		log.Error(err)
		return
	}

	var session *pkt.Session

	if packet.Command == wire.CommandLoginSignIn {
		server, _ := packet.GetMeta(wire.MetaDestServer)
		session = &pkt.Session{
			ChannelId: packet.ChannelId,
			GateId:    server.(string),
			Tags:      []string{"AutoGenerated"},
		}
	} else {
		session, err = h.cache.Get(packet.ChannelId)
		if err == kim.ErrSessionNil {
			_ = RespErr(agent, packet, pkt.Status_SessionNotFound)
			return
		} else if err != nil {
			_ = RespErr(agent, packet, pkt.Status_SystemException)
			return
		}
	}

	log.Debugf("recv a message from %s  %s", session, &packet.Header)

	err = h.r.Serve(packet, h.dispatcher, h.cache, session)
	if err != nil {
		log.Warn(err)
	}
}

func (h *ServHandler) Disconnect(id string) error {
	logger.Warnf("close event of %s", id)

	return nil
}

type ServerDispatcher struct {
}

func (d *ServerDispatcher) Push(gateway string, channels []string, p *pkt.LogicPkt) error {
	p.AddStringMeta(wire.MetaDestChannels, strings.Join(channels, ","))

	return container.Push(gateway, p)
}

func RespErr(agent kim.Agent, p *pkt.LogicPkt, status pkt.Status) error {
	packet := pkt.NewFrom(&p.Header)
	packet.Status = status
	packet.Flag = pkt.Flag_Response

	return agent.Push(pkt.Marshal(packet))
}
